name: ARO Public Deployment
on: [workflow_dispatch]
env:
  LOCATION: australiasoutheast
  ACR_USERNAME: 00000000-0000-0000-0000-000000000000
  CONTAINER_BUILD_NAME: aro_config:1

jobs: 
#  vault_and_identity:
#     runs-on: ubuntu-latest
#     outputs:
#       identityClientId: ${{ steps.identity.outputs.identityClientId }}
#       identityObjectId: ${{ steps.identity.outputs.identityObjectId }}
#       identityName: ${{ steps.identity.outputs.identityName }}
#       keyVaultUri: ${{ steps.keyvault.outputs.keyVaultUri }}
#       keyVaultName: ${{ steps.keyvault.outputs.keyVaultName }}
#     steps:
#     - name: checkout code
#       uses: actions/checkout@v3

#     - name: azure login
#       uses: azure/login@v1
#       with:
#         creds: ${{ secrets.AZURE_CREDENTIALS }}

#     - name: create identity
#       uses: azure/arm-deploy@v1
#       id: identity
#       with:
#         scope: resourcegroup
#         subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
#         resourceGroupName: ${{ secrets.RESOURCEGROUP }}
#         template: ./modules/managed-identity.bicep
#         parameters: >
#           ./action_params/managed-identity.parameters.json
#           location="${{ env.LOCATION }}"
#         deploymentName: identity-github-actions

#     - name: create Keyvault
#       uses: azure/arm-deploy@v1
#       id: keyvault
#       with:
#         scope: resourcegroup
#         subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
#         resourceGroupName: ${{ secrets.RESOURCEGROUP }}
#         template: ./modules/keyvault.bicep
#         parameters: >
#           ./action_params/keyvault.parameters.json
#           location="${{ env.LOCATION }}"
#           identityObjectId=${{ steps.identity.outputs.identityObjectId }}
#           spObjectId=${{ secrets.AAD_OBJECT_ID }}
#         deploymentName: keyvault-github-actions
        
  aro_networking:
    runs-on: ubuntu-latest
    outputs:
      vnetName: ${{ steps.network.outputs.vnetName }}
    steps:
    - name: checkout code
      uses: actions/checkout@v3

    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: ARO networking
      id: network
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.RESOURCEGROUP }}
        template: ./modules/aro_public_network.bicep
        parameters: >
          ./action_params/aro_public_networking.parameters.json
          location="${{ env.LOCATION }}"
        deploymentName: aro-public-networking-github-actions

  deploy_aro: 
    needs: aro_networking
    outputs:
      clusterName: ${{ steps.aro.outputs.clusterName }}
    runs-on: ubuntu-latest
    steps:
    - name: checkout code
      uses: actions/checkout@v3

    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
      
    - name: aro_cluster
      uses: azure/arm-deploy@v1
      id: aro
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.RESOURCEGROUP }}
        template: ./modules/aro_cluster.bicep
        parameters: >
          ./action_params/aro_public.parameters.json 
          pullSecret="${{ secrets.PULL_SECRET }}"
          location="${{ env.LOCATION }}"
          aadClientId="${{ secrets.AAD_CLIENT_ID }}"
          aadClientSecret="${{ secrets.AAD_CLIENT_SECRET }}"
          aadObjectId="${{ secrets.AAD_OBJECT_ID }}"
          rpObjectId="${{ secrets.ARO_RP_OB_ID }}"
          vnetName="${{ needs.aro_networking.outputs.vnetName }}"
          addSpRoleAssignment='no'
        deploymentName: aro-public-github-actions

#  deploy_acr:
#     runs-on: ubuntu-latest
#     outputs:
#       acrName: ${{ steps.acr.outputs.acrName }}
#       loginServer: ${{ steps.acr.outputs.loginServer }}
#     steps:
#     - name: checkout code
#       uses: actions/checkout@v3

#     - name: azure login
#       uses: azure/login@v1
#       with:
#         creds: ${{ secrets.AZURE_CREDENTIALS }}

#     - name: deploy_acr
#       uses: azure/arm-deploy@v1
#       id: acr
#       with:
#         scope: resourcegroup
#         subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
#         resourceGroupName: ${{ secrets.RESOURCEGROUP }}
#         template: ./modules/acr.bicep
#         parameters: > 
#           ./action_params/acr.parameters.json
#           location="${{ env.LOCATION }}" 
#         deploymentName: acr-github-actions

#  build_and_push:
#     runs-on: ubuntu-latest
#     needs: [vault_and_identity, deploy_acr]
#     steps:
#     - name: checkout code
#       uses: actions/checkout@v3

#     - name: azure login
#       uses: azure/login@v1
#       with:
#         creds: ${{ secrets.AZURE_CREDENTIALS }}

#     - name: acr token
#       run: |      
#           ACR_TOKEN="$(az acr login --name ${{ needs.deploy_acr.outputs.acrName }} --expose-token --query accessToken -o tsv)"
#           echo "ACR_TOKEN=${ACR_TOKEN}" >> $GITHUB_ENV
#       shell: bash

#     - name: login to acr
#       uses: azure/docker-login@v1
#       with: 
#         login-server: ${{ needs.deploy_acr.outputs.loginServer }}
#         username: ${{ env.ACR_USERNAME }}
#         password: ${{ env.ACR_TOKEN }}

#     - name: build and push container
#       run: | 
#         docker build . -f ./config_container/Dockerfile -t ${{ needs.deploy_acr.outputs.loginServer }}/${{ env.CONTAINER_BUILD_NAME }}
#         docker push ${{ needs.deploy_acr.outputs.loginServer }}/${{ env.CONTAINER_BUILD_NAME }}

#  write_secrets:
#     needs: [vault_and_identity, deploy_aro]
#     runs-on: ubuntu-latest
#     steps:
#     - name: checkout code
#       uses: actions/checkout@v3
    
#     - name: azure login
#       uses: azure/login@v1
#       with:
#         creds: ${{ secrets.AZURE_CREDENTIALS }}

#     - name: Get ARO cluster details
#       run: |
#           ARO_PWD="$(az aro list-credentials -n ${{ needs.deploy_aro.outputs.clusterName }} -g ${{ secrets.RESOURCEGROUP }} --query kubeadminPassword -o tsv)"
#           ARO_API="$(az aro show -n ${{ needs.deploy_aro.outputs.clusterName }} -g ${{ secrets.RESOURCEGROUP }} --query apiserverProfile.url -o tsv)"
          
#           echo "ARO_PWD=${ARO_PWD}" >> $GITHUB_ENV
#           echo "ARO_API=${ARO_API}" >> $GITHUB_ENV
#       shell: bash

#     - name: api_secret
#       uses: azure/arm-deploy@v1
#       with:
#         scope: resourcegroup
#         subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
#         resourceGroupName: ${{ secrets.RESOURCEGROUP }}
#         template: ./modules/secret.bicep
#         parameters: > 
#           keyVaultName="${{ needs.vault_and_identity.outputs.keyVaultName }}"
#           secretName="aroApiServer"
#           secretValue="${{ env.ARO_API }}"
#         deploymentName: secret-github-actions

#     - name: kubeadmin_secret
#       uses: azure/arm-deploy@v1
#       with:
#         scope: resourcegroup
#         subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
#         resourceGroupName: ${{ secrets.RESOURCEGROUP }}
#         template: ./modules/secret.bicep
#         parameters: > 
#           keyVaultName="${{ needs.vault_and_identity.outputs.keyVaultName }}"
#           secretName="aroKubeAdminPassword"
#           secretValue="${{ env.ARO_PWD }}"
#         deploymentName: secret-github-actions

#  deploy_aci:
#     runs-on: ubuntu-latest
#     needs: [vault_and_identity, aro_networking, write_secrets, deploy_aro, deploy_acr, build_and_push]
#     steps:
#     - name: checkout code
#       uses: actions/checkout@v3

#     - name: azure login
#       uses: azure/login@v1
#       with:
#         creds: ${{ secrets.AZURE_CREDENTIALS }}

#     - name: Get ARO cluster details
#       run: |
#           ARO_PWD="$(az aro list-credentials -n ${{ needs.deploy_aro.outputs.clusterName }} -g ${{ secrets.RESOURCEGROUP }} --query kubeadminPassword -o tsv)"
#           ARO_API="$(az aro show -n ${{ needs.deploy_aro.outputs.clusterName }} -g ${{ secrets.RESOURCEGROUP }} --query apiserverProfile.url -o tsv)"
#           ACR_TOKEN="$(az acr login --name ${{ needs.deploy_acr.outputs.acrName }} --expose-token --query accessToken -o tsv)"
#           IDENTITY_ID="$(az identity show -n ${{ needs.vault_and_identity.outputs.identityName }} -g ${{ secrets.RESOURCEGROUP }} --query id -o tsv)"

#           echo "ARO_PWD=${ARO_PWD}" >> $GITHUB_ENV
#           echo "ARO_API=${ARO_API}" >> $GITHUB_ENV
#           echo "ACR_TOKEN=${ACR_TOKEN}" >> $GITHUB_ENV
#           echo "IDENTITY_ID=${IDENTITY_ID}" >> $GITHUB_ENV
#       shell: bash

#     - name: deploy_aci
#       uses: azure/arm-deploy@v1
#       timeout-minutes: 10
#       with:
#         scope: resourcegroup
#         subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
#         resourceGroupName: ${{ secrets.RESOURCEGROUP }}
#         template: ./modules/aci.bicep
#         parameters: > 
#           ./action_params/aci.parameters.json
#           location="${{ env.LOCATION }}" 
#           loginServer="${{ needs.deploy_acr.outputs.loginServer }}"
#           containerBuildName="${{ env.CONTAINER_BUILD_NAME }}"
#           acrToken="${{ env.ACR_TOKEN }}"
#           acrUserName="${{ env.ACR_USERNAME }}"
#           identityId="${{ env.IDENTITY_ID }}"
#           identityClientId="${{ needs.vault_and_identity.outputs.identityClientId }}"
#           keyVaultUri="${{ needs.vault_and_identity.outputs.keyVaultUri }}"
#         deploymentName: aci-github-actions 
